// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  elements      Element[]
  groups        Group[]
  discordId     String?   @unique
  File          File[]
}

model Group {
  id               String    @id @default(cuid())
  name             String    @unique
  description      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  users            User[]
  masterElements   Element[] @relation("MasterElements_To_Groups")
  editElements     Element[] @relation("EditElements_To_Groups")
  interactElements Element[] @relation("InteractElements_To_Groups")
  viewElements     Element[] @relation("ViewElements_To_Groups")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ElementType {
  Text
  Page
  Event
  Database
  DatabaseView
  Badge
  Survey
  SurveyResponse
  Image
}

enum AttributeType {
  Text
  Number
  Boolean
  Markdown
  Date
  Location
  DatabaseBaseType
  DatabaseViewType
  Database
  Columns
  User
  Users
  SurveyQuestions
  DatabaseSort
  File
  Image
}

model Element {
  id             String      @id @default(cuid())
  index          Int         @default(0)
  route          String      @unique @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  type           ElementType
  atts           Attribute[]
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  masterGroups   Group[]     @relation("MasterElements_To_Groups")
  editGroups     Group[]     @relation("EditElements_To_Groups")
  interactGroups Group[]     @relation("InteractElements_To_Groups")
  viewGroups     Group[]     @relation("ViewElements_To_Groups")
  parentId       String?
  parent         Element?    @relation("Element_To_Parent", fields: [parentId], references: [id])
  children       Element[]   @relation("Element_To_Parent")
}

model Attribute {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  name      String
  type      AttributeType
  value     Json
  required  Boolean
  elementId String
  element   Element       @relation(fields: [elementId], references: [id], onDelete: Cascade)
}

model File {
  id        String   @id @default(cuid())
  uuid      String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileName  String
  mimeType  String
  encoding  String
  hash      String
  size      Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  width     Int?
  height    Int?
}
