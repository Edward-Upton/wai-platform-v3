import type { NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../../utils/trpc";
import { useEffect, useState } from "react";
import Item from "../../components/item";
import {
  closestCenter,
  DndContext,
  DragEndEvent,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { Attribute, Element, Group, User } from "@prisma/client";
import { env } from "../../env/client.mjs";

const AdminAll: NextPage = () => {
  const [items, setItems] = useState<
    (Element & {
      user: User;
      atts: Attribute[];
      masterGroups: Group[];
      editGroups: Group[];
      interactGroups: Group[];
      viewGroups: Group[];
    })[]
  >([]);

  const elements = trpc.element.getAll.useQuery();

  const createElement = trpc.element.create.useMutation();

  useEffect(() => {
    if (!elements.data) return;

    setItems(elements.data.sort((a: any, b: any) => a.index - b.index));
  }, [elements.data]);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const addPage = () => {
    createElement.mutate(
      {
        type: "Page",
        index: 0,
        atts: [
          {
            name: "Title",
            type: "Text",
            value: "Untitled",
            required: true,
          },
        ],
      },
      {
        onSuccess: () => elements.refetch(),
      }
    );
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <div className="flex w-full flex-col items-center justify-center space-y-2 pt-6 text-2xl text-blue-500">
          <DndContext
            sensors={sensors}
            collisionDetection={closestCenter}
            onDragEnd={handleDragEnd}
          >
            <SortableContext
              items={items}
              strategy={verticalListSortingStrategy}
            >
              {items.length > 0 ? (
                items.map((element) => (
                  <Item key={element.id} element={element} editParent={false} />
                ))
              ) : (
                <Item editParent={false} />
              )}
            </SortableContext>
          </DndContext>
        </div>
        <button onClick={addPage}>add</button>
        <AuthShowcase />
      </main>
    </>
  );

  function handleDragEnd(event: DragEndEvent) {
    const { active, over } = event;

    if (!over || active.id === over.id) return;

    setItems((items) => {
      const oldIndex = items.findIndex((item) => item.id === active.id);
      const newIndex = items.findIndex((item) => item.id === over.id);

      console.log("Moving from", oldIndex, "to", newIndex);

      console.log(
        "Before",
        items,
        "after",
        arrayMove(items, oldIndex, newIndex)
      );

      return arrayMove(items, oldIndex, newIndex);
    });
  }
};

export default AdminAll;

/* TODO move; move client id to some ENV accessible to client */
function discordConnect() {
  window.location.href = `https://discord.com/oauth2/authorize?scope=identify&client_id=${env.NEXT_PUBLIC_DISCORD_CLIENT_ID}&response_type=code&redirect_uri=${env.NEXT_PUBLIC_DISCORD_REDIRECT_URI}`;
}

const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();

  const { data: userData } = trpc.user.getMe.useQuery();

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.name || sessionData?.user?.email}{" "}
          with Discord ID {userData?.discordId || "none"}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}
      <button
        className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>

      {sessionData && (
        <button
          className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
          onClick={() => discordConnect()}
        >
          Connect Discord Account
        </button>
      )}
    </div>
  );
};
