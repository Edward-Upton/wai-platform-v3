import Head from "next/head";
import { useEffect, useState } from "react";
import Item from "../item";
import {
  closestCenter,
  DndContext,
  DragEndEvent,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { Attribute, Element, User } from "@prisma/client";

type PageElementProps = {
  element: Element & {
    user: User;
    atts: Attribute[];
    children: (Element & {
      user: User;
      atts: Attribute[];
    })[];
  };
};

const PageElement = ({ element }: PageElementProps) => {
  const [items, setItems] = useState<
    (Element & {
      user: User;
      atts: Attribute[];
    })[]
  >([]);
  useEffect(() => {
    setItems(element.children.sort((a, b) => a.index - b.index));
  }, [element.children]);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h3>Page</h3>
        <div className="flex w-full flex-col items-center justify-center space-y-2 pt-6 text-2xl text-blue-500">
          <DndContext
            sensors={sensors}
            collisionDetection={closestCenter}
            onDragEnd={handleDragEnd}
          >
            <SortableContext
              items={items}
              strategy={verticalListSortingStrategy}
            >
              {items.length > 0 ? (
                items.map((child) => (
                  <Item key={child.id} element={child} parent={element} />
                ))
              ) : (
                <Item parent={element} />
              )}
            </SortableContext>
          </DndContext>
        </div>
      </main>
    </>
  );

  function handleDragEnd(event: DragEndEvent) {
    const { active, over } = event;

    if (!over || active.id === over.id) return;

    setItems((items) => {
      const oldIndex = items.findIndex((item) => item.id === active.id);
      const newIndex = items.findIndex((item) => item.id === over.id);

      return arrayMove(items, oldIndex, newIndex);
    });
  }
};

export default PageElement;
